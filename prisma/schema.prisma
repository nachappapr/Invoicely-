// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  username  String     @unique
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserImage UserImage?
  Invoice   Invoice[]
  password  Password?
  roles     Role[]
  sessions  Session[]
}

model Invoice {
  id                 String        @id @default(cuid())
  fromAddress        String
  fromCity           String
  fromCountry        String
  fromPostalCode     String
  clientName         String
  clientAddress      String
  clientCity         String
  clientCountry      String
  clientPostalCode   String
  clientEmail        String
  invoiceDate        DateTime
  paymentTerms       String
  projectDescription String
  items              InvoiceItem[]
  status             String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
}

model InvoiceItem {
  id        String   @id @default(cuid())
  name      String
  quantity  Int
  price     Float
  total     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoiceId String
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete,view etc.
  entity      String // e.g. invoice, user, manager etc.
  access      String // e.g. own or any 
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Session {
  id             String   @id @default(cuid())
  expirationTime DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String

  // non-unique foreign key
  @@index([userId])
}
